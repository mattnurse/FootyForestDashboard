[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "The Footy Forest",
    "section": "",
    "text": "list(\n  icon = \"clipboard-check\",\n  value = \"105\"\n)\n\n$icon\n[1] \"clipboard-check\"\n\n$value\n[1] \"105\"\n\n\n\n\n\n\nlist(\n  color = \"#49EBB7\",\n  icon = \"bullseye\", \n  value = \"68.6%\"\n)\n\n$color\n[1] \"#49EBB7\"\n\n$icon\n[1] \"bullseye\"\n\n$value\n[1] \"68.6%\"\n\n\n\n\n\n\nlist(\n  color = \"#49EB80\",\n  icon = \"bar-chart-line\", \n  value = \"0.59%\"\n)\n\n$color\n[1] \"#49EB80\"\n\n$icon\n[1] \"bar-chart-line\"\n\n$value\n[1] \"0.59%\""
  },
  {
    "objectID": "index.html#row",
    "href": "index.html#row",
    "title": "The Footy Forest",
    "section": "",
    "text": "list(\n  icon = \"clipboard-check\",\n  value = \"105\"\n)\n\n$icon\n[1] \"clipboard-check\"\n\n$value\n[1] \"105\"\n\n\n\n\n\n\nlist(\n  color = \"#49EBB7\",\n  icon = \"bullseye\", \n  value = \"68.6%\"\n)\n\n$color\n[1] \"#49EBB7\"\n\n$icon\n[1] \"bullseye\"\n\n$value\n[1] \"68.6%\"\n\n\n\n\n\n\nlist(\n  color = \"#49EB80\",\n  icon = \"bar-chart-line\", \n  value = \"0.59%\"\n)\n\n$color\n[1] \"#49EB80\"\n\n$icon\n[1] \"bar-chart-line\"\n\n$value\n[1] \"0.59%\""
  },
  {
    "objectID": "index.html#row-1",
    "href": "index.html#row-1",
    "title": "The Footy Forest",
    "section": "Row",
    "text": "Row\nWelcome to the Footy Forest. Here you’ll find predictions, details on how the model is performing, rankings of each team and occasional statistical analyses of AFL footy and other sports."
  },
  {
    "objectID": "index.html#row-2",
    "href": "index.html#row-2",
    "title": "The Footy Forest",
    "section": "Row",
    "text": "Row\n\nColumn\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(ggimage)\nlibrary(magick)\n\nLinking to ImageMagick 6.9.11.60\nEnabled features: fontconfig, freetype, fftw, heic, lcms, pango, webp, x11\nDisabled features: cairo, ghostscript, raw, rsvg\nUsing 4 threads\n\n#Create df of correct tips by round\nrounds &lt;- c(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18)\ncorrect &lt;- c(6, 5, 6, 8, 4, 5, 9, 6, 4, 5, 7, 3, 4, 6, 5, 6, 6, 5, 7)\ntotal_correct &lt;- sum(correct)\nicon &lt;- c(\"Images/Tree_icon_forest.png\")\nsize = 11 \nreplace = TRUE\n\nmodel_performance &lt;- data.frame(rounds, correct, icon, size, replace)\n  \n\nggplot(model_performance) +\n  aes(x = rounds, y = cumsum(correct)) +\n  geom_line(linewidth = 1) +\n  scale_x_continuous(breaks = seq(min(rounds), max(rounds), 1)) +\n  scale_y_continuous(breaks = seq(0, total_correct, 10)) +\n  labs(y = \"\") +\n  geom_image(aes(image = icon), size = 0.085) +\n  ggtitle(\"Correct tips 2024\") +\n  theme_classic(base_size = 18) +\n  theme(plot.title = element_text(hjust = 0.5))\n\n\n\n\n\n\n\n\n\n\nColumn\n\n########################################################################\nlibrary(tidyverse)\nlibrary(gt)\nlibrary(gtExtras)\n\ntips_table_for_website &lt;- read.csv(\"tips_table_for_website.csv\")\n#Make pretty prediction table 2\ntips_table_for_website &lt;- tips_table_for_website |&gt; \n  select(!c(seas_rnd, venue, tip)) |&gt; \n  rename(Home = home_team, Away = away_team, \n         \"Power\" = elo_differential_c, \n         \"Venue exp\" = venue_experience_differential_c, \n         \"Travel\" = travel_differential_c, \n         \"Team rating\" = team_player_rating_differential_c,\n         \"Predicted winner\" = predicted_winner, \n         \"Margin\" = margin, \n         \"Probability\" = probability) |&gt; \n  relocate(Home, Away, \"Power\", \"Venue exp\", \"Team rating\", \"Travel\", \"Predicted winner\", \"Probability\", \"Margin\")\n\n\nlibrary(gt)\ntips_table_for_website |&gt;  \n  gt() |&gt; \n  tab_header( \n    title = \"Based on teams selected on Thursday night\") |&gt; \n  tab_spanner(\n    label = md(\"Relative advantage to the home team^1^\"),\n    columns = c(\"Power\", \"Venue exp\", \"Travel\", \"Team rating\")) |&gt; \n  tab_footnote(footnote = md(\"^1^This is the difference between the teams where 100 is the highest since 2015 and -100 is the lowest\")) |&gt; \n  opt_align_table_header(align = \"left\") |&gt; \n  cols_align(columns = c(\"Power\", \"Venue exp\", \"Team rating\", \"Travel\", \"Predicted winner\", \"Probability\", \"Margin\") , align = \"center\") |&gt;  tab_style(style = cell_text(weight = \"bold\"), \n            locations = cells_body(columns = c(\"Predicted winner\"))) |&gt; \n  data_color(\n    columns = c(\"Power\", \"Venue exp\", \"Team rating\", \"Travel\"),  \n    palette = c(\"red\", \"white\", \"darkgreen\"),\n    domain = c(-100, 100), \n    quantiles = 5 \n  ) |&gt; \n  cols_width(c(\"Power\", \"Venue exp\", \"Team rating\", \"Travel\") ~ px(95))\n\n\n\n\n\n\n\nBased on teams selected on Thursday night\n\n\nHome\nAway\nRelative advantage to the home team1\nPredicted winner\nProbability\nMargin\n\n\nPower\nVenue exp\nTravel\nTeam rating\n\n\n\n\nEssendon\nAdelaide Crows\n-13.1\n49.6\n18.1\n-11.0\nEssendon\n52\n3\n\n\nGWS Giants\nGold Coast Suns\n4.8\n87.5\n18.9\n18.8\nGWS Giants\n71\n23\n\n\nSt Kilda\nWest Coast Eagles\n31.3\n42.3\n75.1\n18.7\nSt Kilda\n81\n35\n\n\nHawthorn\nCollingwood\n-7.8\n-8.8\n0.0\n22.8\nCollingwood\n53\n4\n\n\nGeelong Cats\nWestern Bulldogs\n-4.2\n84.9\n1.8\n10.5\nGeelong Cats\n62\n13\n\n\nPort Adelaide\nRichmond\n40.0\n57.3\n18.1\n35.9\nPort Adelaide\n82\n37\n\n\nBrisbane Lions\nSydney Swans\n-25.1\n79.9\n19.6\n-3.1\nSydney Swans\n61\n12\n\n\nFremantle\nMelbourne\n5.1\n82.4\n75.2\n-15.6\nFremantle\n75\n27\n\n\nCarlton\nNorth Melbourne\n62.2\n-8.8\n0.0\n27.1\nCarlton\n83\n39\n\n\n\n1This is the difference between the teams where 100 is the highest since 2015 and -100 is the lowest"
  },
  {
    "objectID": "dashboard.html",
    "href": "dashboard.html",
    "title": "The Footy Forest",
    "section": "",
    "text": "#| echo: FALSE\n#| include: FALSE \nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(fitzRoy)\nlibrary(elo)\nlibrary(svglite)\nlibrary(gt)\nlibrary(gtExtras)\n\n\n#Set current date and year\ncurrent_date &lt;- Sys.Date()\ncurrent_year &lt;- format(current_date, \"%Y\")\n\n#Download lastest results from 2024\nhistorical_results_df_2022 &lt;- fetch_results_afl(2022) \nhistorical_results_df_2023 &lt;- fetch_results_afl(2023)\nhistorical_results_df_2024 &lt;- fetch_results_afl(2024)\n\nhistorical_results_df &lt;- rbind(historical_results_df_2022, \n                               historical_results_df_2023, \n                               historical_results_df_2024) %&gt;%\nselect(match.utcStartTime, round.roundNumber, match.venue, venue.name, match.homeTeam.name, match.awayTeam.name, homeTeamScore.matchScore.totalScore, awayTeamScore.matchScore.totalScore, weather.weatherType, round.name) %&gt;%\n  mutate(season = paste0(substr(match.utcStartTime, 1, 4))) %&gt;%\n  mutate(seas_rnd = as.character(paste0(season, \"_\", round.roundNumber)))\n\n#Remove finals games\nhistorical_results_df  &lt;- historical_results_df %&gt;% filter(!grepl(\"Final\", round.name))\n\n\n#Rename variables to something more sensible\nhistorical_results_df &lt;- historical_results_df %&gt;% rename(round_number = round.roundNumber, venue = match.venue, home_team = match.homeTeam.name, away_team = match.awayTeam.name, home_score = homeTeamScore.matchScore.totalScore, away_score = awayTeamScore.matchScore.totalScore)\n\n\n#need to change gold coast and gws to more sensible names\nhistorical_results_df$home_team &lt;- str_replace(historical_results_df$home_team, \"GWS GIANTS\", \"GWS Giants\")\nhistorical_results_df$away_team &lt;- str_replace(historical_results_df$away_team, \"GWS GIANTS\", \"GWS Giants\")\nhistorical_results_df$home_team &lt;- str_replace(historical_results_df$home_team, \"Gold Coast SUNS\", \"Gold Coast Suns\")\nhistorical_results_df$away_team &lt;- str_replace(historical_results_df$away_team, \"Gold Coast SUNS\", \"Gold Coast Suns\")\n\n\n#change any aboriginal names to original names\n#need to change gold coast and gws to more sensible names\nhistorical_results_df$home_team &lt;- str_replace(historical_results_df$home_team, \"Narrm\", \"Melbourne\")\nhistorical_results_df$away_team &lt;- str_replace(historical_results_df$away_team, \"Narrm\", \"Melbourne\")\nhistorical_results_df$home_team &lt;- str_replace(historical_results_df$home_team, \"Kuwarna\", \"Adelaide Crows\")\nhistorical_results_df$away_team &lt;- str_replace(historical_results_df$away_team, \"Kuwarna\", \"Adelaide Crows\")\nhistorical_results_df$home_team &lt;- str_replace(historical_results_df$home_team, \"Yartapuulti\", \"Port Adelaide\")\nhistorical_results_df$away_team &lt;- str_replace(historical_results_df$away_team, \"Yartapuulti\", \"Port Adelaide\")\nhistorical_results_df$home_team &lt;- str_replace(historical_results_df$home_team, \"Walyalup\", \"Fremantle\")\nhistorical_results_df$away_team &lt;- str_replace(historical_results_df$away_team, \"Walyalup\", \"Fremantle\")\nhistorical_results_df$home_team &lt;- str_replace(historical_results_df$home_team, \"Euro-Yroke\", \"St Kilda\")\nhistorical_results_df$away_team &lt;- str_replace(historical_results_df$away_team, \"Euro-Yroke\", \"St Kilda\")\nhistorical_results_df$home_team &lt;- str_replace(historical_results_df$home_team, \"Waalitj Marawar\", \"West Coast Eagles\")\nhistorical_results_df$away_team &lt;- str_replace(historical_results_df$away_team, \"Waalitj Marawar\", \"West Coast Eagles\")\n\n\n\n#these has not been extensively cross-validated and refined - see Hyperparameter_tuning2.R\nHGA &lt;- 45 \nCarry_over &lt;- 0.7 \nk_val &lt;- 42 \n\n\n#Cap the benefit from winning or losing by greater than 80 points\nmap_margin_to_outcome &lt;- function(margin, marg.max = 80, marg.min = -80){\n  norm &lt;- (margin - marg.min)/(marg.max - marg.min)\n  norm %&gt;% pmin(1) %&gt;% pmax(0)\n}\n\n\n# Run ELO\nelo.data &lt;- elo.run(\n  map_margin_to_outcome(home_score - away_score) ~\n    adjust(home_team, HGA) +\n    away_team +\n    regress(season, 1000, Carry_over) +\n    group(seas_rnd),\n  k = k_val,\n  initial.elos = 1000,\n  data = historical_results_df\n)\n\n\nelo.df &lt;- as.data.frame(elo.data)\n\n#Join this to the results database   \nhistorical_results_df &lt;- bind_cols(historical_results_df, elo.df)\n\n#Filter to just this year\nhistorical_results_df &lt;- historical_results_df |&gt;  \n  filter(season == current_year)\n\npower_rankings_home_elos &lt;- historical_results_df |&gt; \n  select(round_number, home_team, elo.A) |&gt; \n  rename(Team = home_team, Power = elo.A)\n\npower_rankings_away_elos &lt;- historical_results_df |&gt; \n  select(round_number, away_team, elo.B) |&gt; \n  rename(Team = away_team, Power = elo.B)\n\n#Join the home and away elos together and Round the numbers and divide by 10 so an average team is 100 \npower_rankings_dashboard &lt;- rbind(power_rankings_home_elos, power_rankings_away_elos) |&gt; \n  arrange(round_number)\n\n#Convert to average team = 100 not 1000 for ease of interpretation \npower_rankings_dashboard &lt;- power_rankings_dashboard |&gt; \n  mutate(Power = round(Power, 1)/10) \n\n\n#### make table for website dashboard\n\n\n#Download ladder and select variables of interest\nladder &lt;- fetch_ladder_afl(comp = \"AFLM\") |&gt;   \n  select(position, team.name, played, thisSeasonRecord.aggregatePoints, thisSeasonRecord.percentage, thisRoundLastSeason.ladderPosition)\n\nNo round number specified, trying to return most recent ladder for specified\nseason\n\n#Rename variables to be more sensible\nladder &lt;- ladder |&gt; \n  rename(\"Ladder position\" = position, Team = team.name, \"Games played\" = played, Points = thisSeasonRecord.aggregatePoints, Percentage = thisSeasonRecord.percentage, \"Ladder position this time last year\" = thisRoundLastSeason.ladderPosition, Played = played)\n\n#Clean up team names\nladder &lt;- ladder %&gt;%\n  mutate(Team = str_replace(Team, \"Gold Coast SUNS\", \"Gold Coast Suns\")) %&gt;%\n  mutate(Team = str_replace(Team, \"GWS GIANTS\", \"GWS Giants\")) %&gt;%\n  mutate(Team = str_replace(Team, \"Narrm\", \"Melbourne\")) %&gt;%\n  mutate(Team = str_replace(Team, \"Kuwarna\", \"Adelaide Crows\")) %&gt;%\n  mutate(Team = str_replace(Team, \"Yartapuulti\", \"Port Adelaide\")) %&gt;%\n  mutate(Team = str_replace(Team, \"Kuwarna\", \"Adelaide Crows\")) %&gt;%\n  mutate(Team = str_replace(Team, \"Euro-Yroke\", \"St Kilda\")) %&gt;%\n  mutate(Team = str_replace(Team, \"Waalitj Marawar\", \"West Coast Eagles\")) %&gt;%\n  mutate(Team = str_replace(Team, \"Walyalup\", \"Fremantle\")) \n\n\n\n\n#Put the power rankings into a single column to create a sparkline\nsparkline_data &lt;- power_rankings_dashboard |&gt; \n  group_by(Team) |&gt; \n  summarize(\"Power trend\" = list(Power), .groups = \"drop\")\n\n\n#Flip this so that each team is on its own row\npower_rankings_dashboard_for_joining &lt;- pivot_wider(data = power_rankings_dashboard, names_from = round_number, values_from = Power)\n\n\n#Replace NAs with the previous column \npower_rankings_dashboard_for_joining &lt;- power_rankings_dashboard_for_joining |&gt;  \n  select(Team, last_col(offset = 1), last_col())\n\n\npower_rankings_dashboard_for_joining &lt;- power_rankings_dashboard_for_joining %&gt;% rename(latest_elo = 3, second_latest_elo = 2 )\n\npower_rankings_dashboard_for_joining &lt;- power_rankings_dashboard_for_joining |&gt;  mutate(power = coalesce(latest_elo, second_latest_elo))\n\npower_rankings_dashboard_for_joining &lt;- select(power_rankings_dashboard_for_joining, 1, last_col())\n\n#Join ladder with temp elo df but first remove old elos\nladder &lt;- ladder |&gt; select(\"Ladder position\", Team, Played, Points, Percentage, \"Ladder position this time last year\")\n\nladder &lt;- left_join(ladder, power_rankings_dashboard_for_joining, by = \"Team\") \n\nladder &lt;- ladder |&gt;  rename(\"Power\" = last_col())\n\nladder &lt;- left_join(ladder, sparkline_data, by = \"Team\")\n\n\nlibrary(tidyverse)\n#Upload team logo images into a tibble\nTeam_logos &lt;- tibble(logo = fs::dir_ls(\"Images/TeamLogos\", glob = \"*.*\"))\n\n#Make sure each team logo corresponds to its team name by copying the name from the logo name and removing the file path and image suffix\nTeam_logos$Team &lt;- Team_logos$logo\nFile_paths_and_suffixes &lt;- c(\"Images/TeamLogos/|.png\")\nTeam_logos$Team &lt;- str_replace_all(Team_logos$Team, File_paths_and_suffixes, \"\")\n\n\n\nladder &lt;- left_join(Team_logos, ladder, by = \"Team\") |&gt; arrange(desc(Power))\n\n#Add rank based on power sorting\nRank &lt;- seq(1,18, by = 1)\n\nladder &lt;- cbind(Rank, ladder)\n\n\nlibrary(gt)\nlibrary(gtExtras)\n\nladder |&gt; \n  gt() |&gt; \n  gt_img_rows(logo, img_source = \"local\") |&gt; \n  cols_align(\n    align = \"center\",\n    columns = everything()\n  ) |&gt; \n  data_color(\n    columns = Power,\n    palette = c(\"#A23333\", \"white\", \"#003300\")) |&gt; \n  cols_label(logo = \"\", Power = \"Power rating\") |&gt;  \n  gt_plt_sparkline(\"Power trend\", type = \"default\", same_limit = FALSE, label = FALSE, palette = c(\"black\", \"transparent\",\"#A23333\",\"#003300\",\"transparent\")) |&gt; opt_interactive(use_resizers = TRUE, use_highlight = TRUE, use_page_size_select = FALSE, use_pagination = FALSE)"
  },
  {
    "objectID": "dashboard.html#column",
    "href": "dashboard.html#column",
    "title": "The Footy Forest",
    "section": "",
    "text": "#| echo: FALSE\n#| include: FALSE \nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(fitzRoy)\nlibrary(elo)\nlibrary(svglite)\nlibrary(gt)\nlibrary(gtExtras)\n\n\n#Set current date and year\ncurrent_date &lt;- Sys.Date()\ncurrent_year &lt;- format(current_date, \"%Y\")\n\n#Download lastest results from 2024\nhistorical_results_df_2022 &lt;- fetch_results_afl(2022) \nhistorical_results_df_2023 &lt;- fetch_results_afl(2023)\nhistorical_results_df_2024 &lt;- fetch_results_afl(2024)\n\nhistorical_results_df &lt;- rbind(historical_results_df_2022, \n                               historical_results_df_2023, \n                               historical_results_df_2024) %&gt;%\nselect(match.utcStartTime, round.roundNumber, match.venue, venue.name, match.homeTeam.name, match.awayTeam.name, homeTeamScore.matchScore.totalScore, awayTeamScore.matchScore.totalScore, weather.weatherType, round.name) %&gt;%\n  mutate(season = paste0(substr(match.utcStartTime, 1, 4))) %&gt;%\n  mutate(seas_rnd = as.character(paste0(season, \"_\", round.roundNumber)))\n\n#Remove finals games\nhistorical_results_df  &lt;- historical_results_df %&gt;% filter(!grepl(\"Final\", round.name))\n\n\n#Rename variables to something more sensible\nhistorical_results_df &lt;- historical_results_df %&gt;% rename(round_number = round.roundNumber, venue = match.venue, home_team = match.homeTeam.name, away_team = match.awayTeam.name, home_score = homeTeamScore.matchScore.totalScore, away_score = awayTeamScore.matchScore.totalScore)\n\n\n#need to change gold coast and gws to more sensible names\nhistorical_results_df$home_team &lt;- str_replace(historical_results_df$home_team, \"GWS GIANTS\", \"GWS Giants\")\nhistorical_results_df$away_team &lt;- str_replace(historical_results_df$away_team, \"GWS GIANTS\", \"GWS Giants\")\nhistorical_results_df$home_team &lt;- str_replace(historical_results_df$home_team, \"Gold Coast SUNS\", \"Gold Coast Suns\")\nhistorical_results_df$away_team &lt;- str_replace(historical_results_df$away_team, \"Gold Coast SUNS\", \"Gold Coast Suns\")\n\n\n#change any aboriginal names to original names\n#need to change gold coast and gws to more sensible names\nhistorical_results_df$home_team &lt;- str_replace(historical_results_df$home_team, \"Narrm\", \"Melbourne\")\nhistorical_results_df$away_team &lt;- str_replace(historical_results_df$away_team, \"Narrm\", \"Melbourne\")\nhistorical_results_df$home_team &lt;- str_replace(historical_results_df$home_team, \"Kuwarna\", \"Adelaide Crows\")\nhistorical_results_df$away_team &lt;- str_replace(historical_results_df$away_team, \"Kuwarna\", \"Adelaide Crows\")\nhistorical_results_df$home_team &lt;- str_replace(historical_results_df$home_team, \"Yartapuulti\", \"Port Adelaide\")\nhistorical_results_df$away_team &lt;- str_replace(historical_results_df$away_team, \"Yartapuulti\", \"Port Adelaide\")\nhistorical_results_df$home_team &lt;- str_replace(historical_results_df$home_team, \"Walyalup\", \"Fremantle\")\nhistorical_results_df$away_team &lt;- str_replace(historical_results_df$away_team, \"Walyalup\", \"Fremantle\")\nhistorical_results_df$home_team &lt;- str_replace(historical_results_df$home_team, \"Euro-Yroke\", \"St Kilda\")\nhistorical_results_df$away_team &lt;- str_replace(historical_results_df$away_team, \"Euro-Yroke\", \"St Kilda\")\nhistorical_results_df$home_team &lt;- str_replace(historical_results_df$home_team, \"Waalitj Marawar\", \"West Coast Eagles\")\nhistorical_results_df$away_team &lt;- str_replace(historical_results_df$away_team, \"Waalitj Marawar\", \"West Coast Eagles\")\n\n\n\n#these has not been extensively cross-validated and refined - see Hyperparameter_tuning2.R\nHGA &lt;- 45 \nCarry_over &lt;- 0.7 \nk_val &lt;- 42 \n\n\n#Cap the benefit from winning or losing by greater than 80 points\nmap_margin_to_outcome &lt;- function(margin, marg.max = 80, marg.min = -80){\n  norm &lt;- (margin - marg.min)/(marg.max - marg.min)\n  norm %&gt;% pmin(1) %&gt;% pmax(0)\n}\n\n\n# Run ELO\nelo.data &lt;- elo.run(\n  map_margin_to_outcome(home_score - away_score) ~\n    adjust(home_team, HGA) +\n    away_team +\n    regress(season, 1000, Carry_over) +\n    group(seas_rnd),\n  k = k_val,\n  initial.elos = 1000,\n  data = historical_results_df\n)\n\n\nelo.df &lt;- as.data.frame(elo.data)\n\n#Join this to the results database   \nhistorical_results_df &lt;- bind_cols(historical_results_df, elo.df)\n\n#Filter to just this year\nhistorical_results_df &lt;- historical_results_df |&gt;  \n  filter(season == current_year)\n\npower_rankings_home_elos &lt;- historical_results_df |&gt; \n  select(round_number, home_team, elo.A) |&gt; \n  rename(Team = home_team, Power = elo.A)\n\npower_rankings_away_elos &lt;- historical_results_df |&gt; \n  select(round_number, away_team, elo.B) |&gt; \n  rename(Team = away_team, Power = elo.B)\n\n#Join the home and away elos together and Round the numbers and divide by 10 so an average team is 100 \npower_rankings_dashboard &lt;- rbind(power_rankings_home_elos, power_rankings_away_elos) |&gt; \n  arrange(round_number)\n\n#Convert to average team = 100 not 1000 for ease of interpretation \npower_rankings_dashboard &lt;- power_rankings_dashboard |&gt; \n  mutate(Power = round(Power, 1)/10) \n\n\n#### make table for website dashboard\n\n\n#Download ladder and select variables of interest\nladder &lt;- fetch_ladder_afl(comp = \"AFLM\") |&gt;   \n  select(position, team.name, played, thisSeasonRecord.aggregatePoints, thisSeasonRecord.percentage, thisRoundLastSeason.ladderPosition)\n\nNo round number specified, trying to return most recent ladder for specified\nseason\n\n#Rename variables to be more sensible\nladder &lt;- ladder |&gt; \n  rename(\"Ladder position\" = position, Team = team.name, \"Games played\" = played, Points = thisSeasonRecord.aggregatePoints, Percentage = thisSeasonRecord.percentage, \"Ladder position this time last year\" = thisRoundLastSeason.ladderPosition, Played = played)\n\n#Clean up team names\nladder &lt;- ladder %&gt;%\n  mutate(Team = str_replace(Team, \"Gold Coast SUNS\", \"Gold Coast Suns\")) %&gt;%\n  mutate(Team = str_replace(Team, \"GWS GIANTS\", \"GWS Giants\")) %&gt;%\n  mutate(Team = str_replace(Team, \"Narrm\", \"Melbourne\")) %&gt;%\n  mutate(Team = str_replace(Team, \"Kuwarna\", \"Adelaide Crows\")) %&gt;%\n  mutate(Team = str_replace(Team, \"Yartapuulti\", \"Port Adelaide\")) %&gt;%\n  mutate(Team = str_replace(Team, \"Kuwarna\", \"Adelaide Crows\")) %&gt;%\n  mutate(Team = str_replace(Team, \"Euro-Yroke\", \"St Kilda\")) %&gt;%\n  mutate(Team = str_replace(Team, \"Waalitj Marawar\", \"West Coast Eagles\")) %&gt;%\n  mutate(Team = str_replace(Team, \"Walyalup\", \"Fremantle\")) \n\n\n\n\n#Put the power rankings into a single column to create a sparkline\nsparkline_data &lt;- power_rankings_dashboard |&gt; \n  group_by(Team) |&gt; \n  summarize(\"Power trend\" = list(Power), .groups = \"drop\")\n\n\n#Flip this so that each team is on its own row\npower_rankings_dashboard_for_joining &lt;- pivot_wider(data = power_rankings_dashboard, names_from = round_number, values_from = Power)\n\n\n#Replace NAs with the previous column \npower_rankings_dashboard_for_joining &lt;- power_rankings_dashboard_for_joining |&gt;  \n  select(Team, last_col(offset = 1), last_col())\n\n\npower_rankings_dashboard_for_joining &lt;- power_rankings_dashboard_for_joining %&gt;% rename(latest_elo = 3, second_latest_elo = 2 )\n\npower_rankings_dashboard_for_joining &lt;- power_rankings_dashboard_for_joining |&gt;  mutate(power = coalesce(latest_elo, second_latest_elo))\n\npower_rankings_dashboard_for_joining &lt;- select(power_rankings_dashboard_for_joining, 1, last_col())\n\n#Join ladder with temp elo df but first remove old elos\nladder &lt;- ladder |&gt; select(\"Ladder position\", Team, Played, Points, Percentage, \"Ladder position this time last year\")\n\nladder &lt;- left_join(ladder, power_rankings_dashboard_for_joining, by = \"Team\") \n\nladder &lt;- ladder |&gt;  rename(\"Power\" = last_col())\n\nladder &lt;- left_join(ladder, sparkline_data, by = \"Team\")\n\n\nlibrary(tidyverse)\n#Upload team logo images into a tibble\nTeam_logos &lt;- tibble(logo = fs::dir_ls(\"Images/TeamLogos\", glob = \"*.*\"))\n\n#Make sure each team logo corresponds to its team name by copying the name from the logo name and removing the file path and image suffix\nTeam_logos$Team &lt;- Team_logos$logo\nFile_paths_and_suffixes &lt;- c(\"Images/TeamLogos/|.png\")\nTeam_logos$Team &lt;- str_replace_all(Team_logos$Team, File_paths_and_suffixes, \"\")\n\n\n\nladder &lt;- left_join(Team_logos, ladder, by = \"Team\") |&gt; arrange(desc(Power))\n\n#Add rank based on power sorting\nRank &lt;- seq(1,18, by = 1)\n\nladder &lt;- cbind(Rank, ladder)\n\n\nlibrary(gt)\nlibrary(gtExtras)\n\nladder |&gt; \n  gt() |&gt; \n  gt_img_rows(logo, img_source = \"local\") |&gt; \n  cols_align(\n    align = \"center\",\n    columns = everything()\n  ) |&gt; \n  data_color(\n    columns = Power,\n    palette = c(\"#A23333\", \"white\", \"#003300\")) |&gt; \n  cols_label(logo = \"\", Power = \"Power rating\") |&gt;  \n  gt_plt_sparkline(\"Power trend\", type = \"default\", same_limit = FALSE, label = FALSE, palette = c(\"black\", \"transparent\",\"#A23333\",\"#003300\",\"transparent\")) |&gt; opt_interactive(use_resizers = TRUE, use_highlight = TRUE, use_page_size_select = FALSE, use_pagination = FALSE)"
  },
  {
    "objectID": "Posts/2024-04-19-update_v1.1/Index.html",
    "href": "Posts/2024-04-19-update_v1.1/Index.html",
    "title": "Update v1.1",
    "section": "",
    "text": "So today I’m releasing a new version which introduces three new features:\n1. The model will factor in the distance each team has traveled as a fourth predictor (along with a form Elo formula, a rating of each player in each selected team, and how often the team plays home games at the venue).\n2. It centres and scales each of these four predictors from -100 to +100, meaning that I will be able to give an easy-to-interpret assessment of the reasons for each prediction (see below).\n3. Each week it selects a few of the empirically best of potentially 68 possible machine learning models in a weighted stack rather than just one. These include random forest models, gradient boosted trees and generalised linear models with elastic net regularisation.\nI’m hoping these changes will lead to more accurate predictions and a better display of what the model is looking at before making each decision."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Frequently asked questions",
    "section": "",
    "text": "Why is this called the “Footy Forest”?\nThe statistical techniques used in this model are “tree-based”, so I thought I’d take the tree concept and run with it like Ed Langdon on a fast break. Also it predicts … footy.\nWhat variables does the Footy Forest use?\nIt uses four variables. These are:\n\neach team’s form, based on an Elo formula.\nvenue experience\nplayer ratings for each selected team, and\nthe distance each team has had to travel.\n\nEach of these are calculated for each team and then converted as a relative measure showing the advantage for the home team compared to its opponent on the day.\n\n\n\nAre you doing this to make money?\nHell, no. I am doing this for fun and for a challenge. Yes, I am a nerd. And yes, I am obsessed by Australian football.\nShould I use this model to place bets?\nDefinitely not. Betting is for mugs and niff-naffs.\nShould I use this model for footy tipping?\nAbsolutely. Go bananas.\n\n\n\nWhat program did you use to write this model?\nI use R for this project, which is what I use for a lot of my academic work. The website you’re looking at now is also produced with R with RStudio and Quarto.\nDoes this model use ChatGPT, or a similar large language model?\nNo. This model is one hundred per cent pure, old fashioned, home-grown human-written computer code, born free right here in the real world.\nIsn’t that a line from The Matrix?\nYes. Yes it is.\nWhat techniques are used for this model?\nThis model is an ensemble of models compiled with the R Tidymodels package. It uses a stacked combination of gradient boosted trees, generalised linear models and random forest models to make its predictions.\nWhere do you get your data from?\nI use the FitzRoy package for R. It is wonderful. Cheers to the legends to have developed it and maintain it.\n\n\n\nWhat is Australian football or the Australian Football League?\nMy friend, let me introduce you to by far the best sport on the entire planet.\n\n\n\nWhat football team do you barrack for?\nI barrack for the original Australian football team – the Melbourne Demons.\nWho is your favourite footballer?\nAs a kid my favourite player was Stephen (Stinga) Tingay. But right now it is probably young Caleb Windsor. I guess I have a thing for wingers.\nWhat is your background?\nI am a quantitative social scientist who is mainly interested in researching empirical problems in science communication. While this gives me some useful skills in statistical analysis, and I have helped to publish some academic work using machine learning techniques, there are many more qualified people than me who have produced similar models. Prior to this I worked in various communication roles.\nAre you a real doctor?\nI am not a medical doctor. I have a PhD in science from ANU.\nHow frequently are you actually asked these questions?\nNever. I’ve never been asked any of these questions."
  },
  {
    "objectID": "about.html#model-questions",
    "href": "about.html#model-questions",
    "title": "Frequently asked questions",
    "section": "",
    "text": "Why is this called the “Footy Forest”?\nThe statistical techniques used in this model are “tree-based”, so I thought I’d take the tree concept and run with it like Ed Langdon on a fast break. Also it predicts … footy.\nWhat variables does the Footy Forest use?\nIt uses four variables. These are:\n\neach team’s form, based on an Elo formula.\nvenue experience\nplayer ratings for each selected team, and\nthe distance each team has had to travel.\n\nEach of these are calculated for each team and then converted as a relative measure showing the advantage for the home team compared to its opponent on the day."
  },
  {
    "objectID": "about.html#betting-and-tipping",
    "href": "about.html#betting-and-tipping",
    "title": "Frequently asked questions",
    "section": "",
    "text": "Are you doing this to make money?\nHell, no. I am doing this for fun and for a challenge. Yes, I am a nerd. And yes, I am obsessed by Australian football.\nShould I use this model to place bets?\nDefinitely not. Betting is for mugs and niff-naffs.\nShould I use this model for footy tipping?\nAbsolutely. Go bananas."
  },
  {
    "objectID": "about.html#technical-questions",
    "href": "about.html#technical-questions",
    "title": "Frequently asked questions",
    "section": "",
    "text": "What program did you use to write this model?\nI use R for this project, which is what I use for a lot of my academic work. The website you’re looking at now is also produced with R with RStudio and Quarto.\nDoes this model use ChatGPT, or a similar large language model?\nNo. This model is one hundred per cent pure, old fashioned, home-grown human-written computer code, born free right here in the real world.\nIsn’t that a line from The Matrix?\nYes. Yes it is.\nWhat techniques are used for this model?\nThis model is an ensemble of models compiled with the R Tidymodels package. It uses a stacked combination of gradient boosted trees, generalised linear models and random forest models to make its predictions.\nWhere do you get your data from?\nI use the FitzRoy package for R. It is wonderful. Cheers to the legends to have developed it and maintain it."
  },
  {
    "objectID": "about.html#afl-questions",
    "href": "about.html#afl-questions",
    "title": "Frequently asked questions",
    "section": "",
    "text": "What is Australian football or the Australian Football League?\nMy friend, let me introduce you to by far the best sport on the entire planet."
  },
  {
    "objectID": "about.html#personal-questions",
    "href": "about.html#personal-questions",
    "title": "Frequently asked questions",
    "section": "",
    "text": "What football team do you barrack for?\nI barrack for the original Australian football team – the Melbourne Demons.\nWho is your favourite footballer?\nAs a kid my favourite player was Stephen (Stinga) Tingay. But right now it is probably young Caleb Windsor. I guess I have a thing for wingers.\nWhat is your background?\nI am a quantitative social scientist who is mainly interested in researching empirical problems in science communication. While this gives me some useful skills in statistical analysis, and I have helped to publish some academic work using machine learning techniques, there are many more qualified people than me who have produced similar models. Prior to this I worked in various communication roles.\nAre you a real doctor?\nI am not a medical doctor. I have a PhD in science from ANU.\nHow frequently are you actually asked these questions?\nNever. I’ve never been asked any of these questions."
  },
  {
    "objectID": "Posts/2024-07-07-Launch-of-the-Footy-Forest/Index.html",
    "href": "Posts/2024-07-07-Launch-of-the-Footy-Forest/Index.html",
    "title": "Launch of the Footy Forest",
    "section": "",
    "text": "I’ve spent the summer programming and training a machine learning model to predict AFL footy games. I’m not doing this for betting but simply hoping to do better than the average expert tipster over the year.\nYou can follow me on Facebook if you’re interested in finding out how I go. No doubt I’ll learn a fair bit during the year and might update the model as I learn, but if it does fairly well, I might register it with Squiggle in 2025. Some people might be interested in my motivation for doing this. Part of my PhD project involved researching how people who tended to think intuitively were more likely make poor decisions compared to those who used analytic thinking styles.\nThinking about this I often reflected upon all the intuitive heuristics that people – including me – use for things like footy tipping. I also started to use machine learning for predictive analysis. During the summer I started to investigate whether I could use these skills to develop a purely data-driven approach to footy tipping, that would override intuition.\nAnd this is the result of those musings – a machine learning model that overrides intuition for the pure enjoyment of analysing the chance that your footy team might get the four points on the weekend."
  },
  {
    "objectID": "Posts/2024-05-17-what is the footy forest’s form variable and how does it work/Index.html",
    "href": "Posts/2024-05-17-what is the footy forest’s form variable and how does it work/Index.html",
    "title": "What is the Footy Forest’s form variable and how does it work",
    "section": "",
    "text": "The way I measure form in the Footy Forest is entirely based on a commonly used rating formula called Elo. This formula was developed to rate and rank the relative skill levels chess players, but it can also be applied to team sports like Australian rules football. Originally developed by Arpad Elo, a Hungarian-American physics professor, the Elo formula has become one of the most popular ways of ranking players and teams across many competitive domains.\n\nHow the Elo Formula Works\nAt its core, the Elo rating system assumes that the chance of one team beating another is a based on a rating difference between. This rating takes into account the previous results not only between these two teams but against all teams in the competition. If two teams have equal ratings, we’d expect each team to have an equal chance of winning the game. But as the rating gap widens, the probability favours the higher-rated team.\nAfter each game, the Elo formula updates the ratings of the winning and losing teams based on the pre-game ratings and the margin. The winner gains rating some points from the loser, with the number of points exchanged being higher when there is an upset. So, if your team is ranked towards the bottom and you beat a strongly ranked team, your team will get a large boost in its rating. So, the Footy Forest updates the ratings after every game to make sure it is updating every team’s form based on the latest results.\nOf course, the Elo ratings are just one input and in the Footy Forest this measure of form is combined with other data like a rating for each selected player in each team, experience at the venue, and travel, to build a fairly sophisticated AFL prediction model. But the Elo / form variable is the starting point for the model because my tests show that it is the single most powerful predictor of match outcomes.\nIt also means I can calculate power rankings for each team, such as the table below. Power here is simply refers to the raw Elo rating. This ranking is much more useful than looking at the ladder, because your team could have simply beaten a bunch of lowly ranked teams.\nIn the Footy Forest, the form variable uses the information from the Elo formula. It presents the ratings in a relative sense, where the home team’s form is subtracted from the away team’s form. It then compares this result to every form rating for every game since 2015, so that you can see the measure in this historical context.\nSo in the table below, you can see not only that West Coast’s form is very low compared to Melbourne’s (at -89.9) but also that the form disadvantage is close to the highest relative disadvantage we’ve seen since 2015 (which would be -100)."
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Blog",
    "section": "",
    "text": "What is the Footy Forest’s form variable and how does it work\n\n\n\n\n\n\nAFL football\n\n\nMachine learning\n\n\n\nElo elo elo\n\n\n\n\n\n17-May-2024\n\n\nMatt Nurse\n\n\n\n\n\n\n\n\n\n\n\n\nUpdate v1.1\n\n\n\n\n\n\nAFL football\n\n\nMachine learning\n\n\n\nNew variables and a new hope\n\n\n\n\n\n19-April-2024\n\n\nMatt Nurse\n\n\n\n\n\n\n\n\n\n\n\n\nLaunch of the Footy Forest\n\n\n\n\n\n\nAFL football\n\n\nMachine learning\n\n\n\nLet’s bounce the ball\n\n\n\n\n\n7-March-2024\n\n\nMatt Nurse\n\n\n\n\n\n\nNo matching items"
  }
]