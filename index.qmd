---
format: 
  dashboard
---


## Row {height="30%"}

### Column

```{r}
#| content: valuebox
#| title: "Correct tips"
list(color = "darkgreen",
  icon = "clipboard-check",
  value = "51"
)

```

### Column

```{r}
#| content: valuebox
#| title: "Accuracy"
list(
  color = "darkgreen",
  icon = "bullseye", 
  value = "63%"
)

```

### Column

```{r}
#| content: valuebox
#| title: "Top percentile of AFL footy tipping"
list(
  color = "darkgreen",
  icon = "bar-chart-line", 
  value = "35%"
)

```

## Row {height="10%"}

Welcome to the Footy Forest. Here you'll find predictions, details on how the model is performing, rankings of each team and occasional statistical analyses of AFL footy and other sports.

## Row {height="60%"}

### Column

```{r}
library(tidyverse)
library(ggimage)
library(magick)

#Load tips by round data created in a seperate script in the Footy Forest project
performance_data <- read.csv2("performance_data.csv")

#Create plot
performance_graph <- ggplot(performance_data) +
  aes(x = round, y = tips) +
  geom_col(fill = "#006400") +  # Replace geom_point with geom_col
  theme_classic() +
  scale_x_continuous(breaks = 0:24, limits = c(-0.5, 24))

#Display plot
performance_graph

```

### Column

```{r, make pretty predictions table}
########################################################################
library(tidyverse)
library(gt)
library(gtExtras)

  # Create GT table with formatting
  pretty_predictions_table <- read.csv("tips_table_for_website.csv") %>%
    select(-matchID, -seas_rnd, -has_lineup_data, -tip, -venue) %>%
    rename(
        Home = home_team, 
        Away = away_team, 
        "Power" = elo_differential_c, 
        "Venue exp" = venue_experience_differential_c, 
        "Team rating" = team_player_rating_differential_c, 
        "Travel" = travel_differential_c, 
        "Predicted winner" = predicted_winner,
        "Margin" = margin,
        "Probability" = probability) %>%
    gt() %>% 
    tab_spanner(
      label = md("Relative advantage to the home team^1^"),
      columns = c("Power", "Venue exp", "Team rating", "Travel")
    ) %>%
    tab_footnote(
      footnote = md("^1^ Relative advantage to the home team scaled from -100 to +100 www.footyforest.com")
    ) %>% 
    opt_align_table_header(align = "left") %>%
    cols_align(
      columns = c("Power", "Venue exp", "Team rating", "Travel", 
                  "Predicted winner", "Margin"),
      align = "center"
    ) %>% 
    tab_style(
      style = cell_text(weight = "bold"), 
      locations = cells_body(columns = c("Predicted winner"))
    ) %>%
    fmt_number(
      columns = c("Power", "Venue exp", "Travel"),  # Team rating handled separately
      decimals = 0
    ) %>%
    data_color(
      columns = c("Power", "Venue exp", "Travel"),  
      palette = c("red", "white", "darkgreen"),
      domain = c(-100, 100), 
      quantiles = 5 
    ) %>% 
    cols_width(c("Power", "Venue exp", "Team rating", "Travel") ~ px(95))
  
  # Check if all Team rating values are numeric (not "TBA")
  all_team_ratings_numeric <- !any(pretty_predictions_table$`Team rating` == "TBA")
  
  # Add color to Team rating only if all values are numeric
if(all_team_ratings_numeric) {
  pretty_predictions_table <- pretty_predictions_table %>%
    fmt_number(
      columns = c("Team rating"),
      decimals = 0
    ) %>%
    data_color(
      columns = c("Team rating"),  
      palette = c("red", "white", "darkgreen"),
      domain = c(-100, 100), 
      quantiles = 5 
    )
}

# Display the table outside the if statement to ensure it always renders
pretty_predictions_table

```